{"version":3,"sources":["components/webcam-qr-scanner.tsx","components/DemoOneOffScanning.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Camera","props","onVideo","constraints","videoProps","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","video","setVideo","streamPromise","useMemo","navigator","mediaDevices","getUserMedia","facingMode","audio","catch","err","console","error","useEffect","then","stream","srcObject","onloadedmetadata","play","getVideoTracks","forEach","track","removeTrack","react_default","a","createElement","assign","ref","VideoQrScanner","onQrCode","qrScanner","QrScannerEngine","start","stop","Fragment","ContinuousQrScanner","_useState3","_useState4","log","OneOffQrScanner","_useState5","_useState6","hasShown","setHasShown","qrCode","DemoOneOffScanning","setQrCode","shouldScan","setShouldScan","onClick","hidden","App","components_DemoOneOffScanning","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.89550dd0.chunk.js","sourcesContent":["import QrScannerEngine from 'qr-scanner';\nimport React, { HTMLProps, useEffect, useMemo, useState } from 'react';\n\nexport type CameraProps = HTMLProps<HTMLVideoElement> & {\n    onVideo: (video: HTMLVideoElement) => void;\n    constraints?: MediaStreamConstraints;\n};\n\nexport function Camera(props: CameraProps) {\n    const { onVideo, constraints, ...videoProps } = props;\n    const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n\n    const streamPromise = useMemo(\n        () =>\n            navigator.mediaDevices.getUserMedia(\n                constraints || { video: { facingMode: 'environment' }, audio: false },\n            ),\n        [constraints],\n    );\n    useMemo(() => {\n        streamPromise.catch((err) =>\n            console.error('failed to get user media:', err),\n        );\n    }, [streamPromise]);\n\n    useEffect(() => {\n        streamPromise.then((stream) => {\n            if (!video) {\n                return;\n            }\n            video.srcObject = stream;\n            video.onloadedmetadata = () => {\n                video.play();\n                onVideo(video);\n            };\n        });\n        return () => { };\n    }, [video, streamPromise, onVideo]);\n\n    useEffect(() => {\n        return () => {\n            streamPromise.then((stream) => {\n                stream.getVideoTracks().forEach((track) => stream.removeTrack(track));\n            });\n        };\n    }, [streamPromise]);\n\n    return <video {...videoProps} ref={setVideo}></video>;\n}\n\nexport type VideoQrScannerProps = {\n    onQrCode: (qrCode: string) => void;\n    video: HTMLVideoElement;\n};\n\nexport function VideoQrScanner(props: VideoQrScannerProps) {\n    const { video, onQrCode } = props;\n\n    useEffect(() => {\n        const qrScanner = new QrScannerEngine(video, onQrCode);\n        qrScanner.start();\n        return () => {\n            qrScanner.stop();\n        };\n    }, [video, onQrCode]);\n\n    return <></>;\n}\n\nexport type QrScannerProps = Omit<CameraProps, 'onVideo'> &\n    Pick<VideoQrScannerProps, 'onQrCode'>;\n\nexport function ContinuousQrScanner(props: QrScannerProps) {\n    const { onQrCode, ...videoProps } = props;\n    const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n    console.log('...');\n    return (\n        <>\n            <Camera onVideo={setVideo} {...videoProps} />\n            {video && <VideoQrScanner video={video} onQrCode={onQrCode} />}\n        </>\n    );\n}\n\nexport function OneOffQrScanner(props: QrScannerProps) {\n    const { onQrCode, ...videoProps } = props;\n    const [hasShown, setHasShown] = useState(false);\n    function oneOffOnQrCode(qrCode: string) {\n        console.log('qrCode=', qrCode);\n        onQrCode(qrCode);\n        setHasShown(true);\n    }\n    if (hasShown) {\n        return <></>;\n    }\n    return <ContinuousQrScanner onQrCode={oneOffOnQrCode} {...videoProps} />;\n}\n\nexport default OneOffQrScanner;","import React, { useState } from 'react';\nimport { OneOffQrScanner } from './webcam-qr-scanner';\n\nfunction DemoOneOffScanning() {\n  const [qrCode, setQrCode] = useState('');\n  const [shouldScan, setShouldScan] = useState(false);\n\n  function startScanner() {\n    setShouldScan(true);\n  }\n  function stopScanner() {\n    setShouldScan(false);\n  }\n  function onQrCode(qrCode: string) {\n    setQrCode(qrCode);\n    setShouldScan(false);\n  }\n\n  return (\n    <>\n      <p>\n        QR Code: <code>{qrCode}</code>\n      </p>\n      {!shouldScan ? (\n        <button onClick={startScanner}>Scan QR Code</button>\n      ) : (\n        <>\n          <button onClick={stopScanner}>Stop Scanning</button>\n          {/* auto close the webcam once detected QR code */}\n          <OneOffQrScanner\n            onQrCode={onQrCode}\n            hidden={false} /* optional: set true to hide the video-preview */\n          />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default DemoOneOffScanning;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GenerateQrcode from './components/GenerateQrcode';\nimport DemoOneOffScanning from './components/DemoOneOffScanning';\n\n\nfunction App() {\n  return (\n    <div>\n      {/* <GenerateQrcode /> */}\n\n      <DemoOneOffScanning />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}